<?php

declare(strict_types=1);

namespace RefactoringExercises\CodeSmells\DuplicateCode;

class ReportGenerator
{
    public function generateSalesReport(array $salesData): string
    {
        // DUPLICATE CODE: Header formatting - identical across all reports
        $header = "==========================================\n";
        $header .= "          COMPANY SALES REPORT           \n";
        $header .= "==========================================\n";
        $header .= "Generated on: " . date('Y-m-d H:i:s') . "\n";
        $header .= "==========================================\n\n";

        $content = $header;

        // DUPLICATE CODE: Similar data processing with variations
        $total = 0;
        $count = 0;
        $maxValue = 0;
        $minValue = empty($salesData) ? 0 : PHP_FLOAT_MAX;

        foreach ($salesData as $sale) {
            $amount = $sale['amount'];
            $total += $amount;
            $count++;
            
            if ($amount > $maxValue) {
                $maxValue = $amount;
            }
            if ($amount < $minValue) {
                $minValue = $amount;
            }
            
            $content .= sprintf("Sale #%d: $%.2f (Customer: %s)\n", 
                $sale['id'], $amount, $sale['customer']);
        }

        $average = $count > 0 ? $total / $count : 0;

        // DUPLICATE CODE: Summary formatting - similar pattern
        $content .= "\n--- SALES SUMMARY ---\n";
        $content .= sprintf("Total Sales: $%.2f\n", $total);
        $content .= sprintf("Number of Sales: %d\n", $count);
        $content .= sprintf("Average Sale: $%.2f\n", $average);
        $content .= sprintf("Highest Sale: $%.2f\n", $maxValue);
        $content .= sprintf("Lowest Sale: $%.2f\n", $minValue);

        // DUPLICATE CODE: Footer formatting - identical across all reports
        $footer = "\n==========================================\n";
        $footer .= "Report generated by ReportGenerator v1.0\n";
        $footer .= "Contact: reports@company.com\n";
        $footer .= "==========================================\n";

        return $content . $footer;
    }

    public function generateCustomerReport(array $customerData): string
    {
        // DUPLICATE CODE: Header formatting - identical to sales report
        $header = "==========================================\n";
        $header .= "         COMPANY CUSTOMER REPORT         \n";
        $header .= "==========================================\n";
        $header .= "Generated on: " . date('Y-m-d H:i:s') . "\n";
        $header .= "==========================================\n\n";

        $content = $header;

        // DUPLICATE CODE: Similar data processing logic with variations
        $total = 0;
        $count = 0;
        $maxValue = 0;
        $minValue = empty($customerData) ? 0 : PHP_FLOAT_MAX;

        foreach ($customerData as $customer) {
            $spentAmount = $customer['totalSpent'];
            $total += $spentAmount;
            $count++;
            
            if ($spentAmount > $maxValue) {
                $maxValue = $spentAmount;
            }
            if ($spentAmount < $minValue) {
                $minValue = $spentAmount;
            }
            
            $content .= sprintf("Customer: %s (ID: %d) - Total Spent: $%.2f\n", 
                $customer['name'], $customer['id'], $spentAmount);
        }

        $average = $count > 0 ? $total / $count : 0;

        // DUPLICATE CODE: Summary formatting - almost identical pattern
        $content .= "\n--- CUSTOMER SUMMARY ---\n";
        $content .= sprintf("Total Revenue: $%.2f\n", $total);
        $content .= sprintf("Number of Customers: %d\n", $count);
        $content .= sprintf("Average Spent: $%.2f\n", $average);
        $content .= sprintf("Top Customer Spent: $%.2f\n", $maxValue);
        $content .= sprintf("Lowest Customer Spent: $%.2f\n", $minValue);

        // DUPLICATE CODE: Footer formatting - identical to sales report
        $footer = "\n==========================================\n";
        $footer .= "Report generated by ReportGenerator v1.0\n";
        $footer .= "Contact: reports@company.com\n";
        $footer .= "==========================================\n";

        return $content . $footer;
    }

    public function generateProductReport(array $productData): string
    {
        // DUPLICATE CODE: Header formatting - identical to other reports
        $header = "==========================================\n";
        $header .= "         COMPANY PRODUCT REPORT          \n";
        $header .= "==========================================\n";
        $header .= "Generated on: " . date('Y-m-d H:i:s') . "\n";
        $header .= "==========================================\n\n";

        $content = $header;

        // DUPLICATE CODE: Similar data processing with slight variations
        $total = 0;
        $count = 0;
        $maxValue = 0;
        $minValue = empty($productData) ? 0 : PHP_FLOAT_MAX;

        foreach ($productData as $product) {
            $revenue = $product['revenue'];
            $total += $revenue;
            $count++;
            
            if ($revenue > $maxValue) {
                $maxValue = $revenue;
            }
            if ($revenue < $minValue) {
                $minValue = $revenue;
            }
            
            $content .= sprintf("Product: %s (SKU: %s) - Revenue: $%.2f (Sold: %d)\n", 
                $product['name'], $product['sku'], $revenue, $product['unitsSold']);
        }

        $average = $count > 0 ? $total / $count : 0;

        // DUPLICATE CODE: Summary formatting - same pattern again
        $content .= "\n--- PRODUCT SUMMARY ---\n";
        $content .= sprintf("Total Product Revenue: $%.2f\n", $total);
        $content .= sprintf("Number of Products: %d\n", $count);
        $content .= sprintf("Average Product Revenue: $%.2f\n", $average);
        $content .= sprintf("Top Product Revenue: $%.2f\n", $maxValue);
        $content .= sprintf("Lowest Product Revenue: $%.2f\n", $minValue);

        // DUPLICATE CODE: Footer formatting - identical to other reports
        $footer = "\n==========================================\n";
        $footer .= "Report generated by ReportGenerator v1.0\n";
        $footer .= "Contact: reports@company.com\n";
        $footer .= "==========================================\n";

        return $content . $footer;
    }

    public function exportReportToCsv(string $reportContent, string $filename): string
    {
        // DUPLICATE CODE: Similar export logic - will be used in JSON export too
        $timestamp = date('Y-m-d_H-i-s');
        $fullFilename = $filename . '_' . $timestamp . '.csv';
        
        // Convert report content to CSV format
        $lines = explode("\n", $reportContent);
        $csvContent = '';
        
        foreach ($lines as $line) {
            if (strpos($line, ':') !== false) {
                $parts = explode(':', $line, 2);
                $csvContent .= '"' . trim($parts[0]) . '","' . trim($parts[1]) . '"' . "\n";
            }
        }
        
        // DUPLICATE CODE: File writing logic
        $result = "CSV Export completed successfully!\n";
        $result .= "Filename: " . $fullFilename . "\n";
        $result .= "Content size: " . strlen($csvContent) . " bytes\n";
        
        return $result;
    }

    public function exportReportToJson(string $reportContent, string $filename): string
    {
        // DUPLICATE CODE: Similar export logic - timestamp and filename generation
        $timestamp = date('Y-m-d_H-i-s');
        $fullFilename = $filename . '_' . $timestamp . '.json';
        
        // Convert report content to JSON format
        $lines = explode("\n", $reportContent);
        $jsonData = [];
        
        foreach ($lines as $line) {
            if (strpos($line, ':') !== false) {
                $parts = explode(':', $line, 2);
                $jsonData[trim($parts[0])] = trim($parts[1]);
            }
        }
        
        $jsonContent = json_encode($jsonData, JSON_PRETTY_PRINT);
        
        // DUPLICATE CODE: File result formatting - identical to CSV export
        $result = "JSON Export completed successfully!\n";
        $result .= "Filename: " . $fullFilename . "\n";
        $result .= "Content size: " . strlen($jsonContent !== false ? $jsonContent : '') . " bytes\n";
        
        return $result;
    }
}
"""
Report generator with duplicate code problems.

This module contains a ReportGenerator class that suffers from duplicate code.
The class generates various types of reports (sales, customer, product) and
provides export functionality to different formats.
"""

import json
from datetime import datetime
from typing import Any


class ReportGenerator:
    """
    A report generator that creates various business reports.

    This class demonstrates the Duplicate Code smell with identical and similar
    code blocks across different report generation methods.
    """

    def generate_sales_report(self, sales_data: list[dict[str, Any]]) -> str:
        """
        Generate a sales report from sales data.

        Args:
            sales_data: List of sales records with 'id', 'amount', and 'customer' keys

        Returns:
            Formatted sales report as string
        """
        # DUPLICATE CODE: Header formatting - identical across all reports
        header = "==========================================\n"
        header += "          COMPANY SALES REPORT           \n"
        header += "==========================================\n"
        header += f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        header += "==========================================\n\n"

        content = header

        # DUPLICATE CODE: Similar data processing with variations
        total = 0.0
        count = 0
        max_value = 0.0
        min_value = float("inf") if sales_data else 0.0

        for sale in sales_data:
            amount = sale["amount"]
            total += amount
            count += 1

            if amount > max_value:
                max_value = amount
            if amount < min_value:
                min_value = amount

            content += (
                f"Sale #{sale['id']}: ${amount:.2f} (Customer: {sale['customer']})\n"
            )

        average = total / count if count > 0 else 0.0

        # DUPLICATE CODE: Summary formatting - similar pattern
        content += "\n--- SALES SUMMARY ---\n"
        content += f"Total Sales: ${total:.2f}\n"
        content += f"Number of Sales: {count}\n"
        content += f"Average Sale: ${average:.2f}\n"
        content += f"Highest Sale: ${max_value:.2f}\n"
        content += f"Lowest Sale: ${min_value:.2f}\n"

        # DUPLICATE CODE: Footer formatting - identical across all reports
        footer = "\n==========================================\n"
        footer += "Report generated by ReportGenerator v1.0\n"
        footer += "Contact: reports@company.com\n"
        footer += "==========================================\n"

        return content + footer

    def generate_customer_report(self, customer_data: list[dict[str, Any]]) -> str:
        """
        Generate a customer report from customer data.

        Args:
            customer_data: List of customer records with 'id', 'name', and 'totalSpent' keys

        Returns:
            Formatted customer report as string
        """
        # DUPLICATE CODE: Header formatting - identical to sales report
        header = "==========================================\n"
        header += "         COMPANY CUSTOMER REPORT         \n"
        header += "==========================================\n"
        header += f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        header += "==========================================\n\n"

        content = header

        # DUPLICATE CODE: Similar data processing logic with variations
        total = 0.0
        count = 0
        max_value = 0.0
        min_value = float("inf") if customer_data else 0.0

        for customer in customer_data:
            spent_amount = customer["totalSpent"]
            total += spent_amount
            count += 1

            if spent_amount > max_value:
                max_value = spent_amount
            if spent_amount < min_value:
                min_value = spent_amount

            content += f"Customer: {customer['name']} (ID: {customer['id']}) - Total Spent: ${spent_amount:.2f}\n"

        average = total / count if count > 0 else 0.0

        # DUPLICATE CODE: Summary formatting - almost identical pattern
        content += "\n--- CUSTOMER SUMMARY ---\n"
        content += f"Total Revenue: ${total:.2f}\n"
        content += f"Number of Customers: {count}\n"
        content += f"Average Spent: ${average:.2f}\n"
        content += f"Top Customer Spent: ${max_value:.2f}\n"
        content += f"Lowest Customer Spent: ${min_value:.2f}\n"

        # DUPLICATE CODE: Footer formatting - identical to sales report
        footer = "\n==========================================\n"
        footer += "Report generated by ReportGenerator v1.0\n"
        footer += "Contact: reports@company.com\n"
        footer += "==========================================\n"

        return content + footer

    def generate_product_report(self, product_data: list[dict[str, Any]]) -> str:
        """
        Generate a product report from product data.

        Args:
            product_data: List of product records with 'name', 'sku', 'revenue', and 'unitsSold' keys

        Returns:
            Formatted product report as string
        """
        # DUPLICATE CODE: Header formatting - identical to other reports
        header = "==========================================\n"
        header += "         COMPANY PRODUCT REPORT          \n"
        header += "==========================================\n"
        header += f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        header += "==========================================\n\n"

        content = header

        # DUPLICATE CODE: Similar data processing with slight variations
        total = 0.0
        count = 0
        max_value = 0.0
        min_value = float("inf") if product_data else 0.0

        for product in product_data:
            revenue = product["revenue"]
            total += revenue
            count += 1

            if revenue > max_value:
                max_value = revenue
            if revenue < min_value:
                min_value = revenue

            content += f"Product: {product['name']} (SKU: {product['sku']}) - Revenue: ${revenue:.2f} (Sold: {product['unitsSold']})\n"

        average = total / count if count > 0 else 0.0

        # DUPLICATE CODE: Summary formatting - same pattern again
        content += "\n--- PRODUCT SUMMARY ---\n"
        content += f"Total Product Revenue: ${total:.2f}\n"
        content += f"Number of Products: {count}\n"
        content += f"Average Product Revenue: ${average:.2f}\n"
        content += f"Top Product Revenue: ${max_value:.2f}\n"
        content += f"Lowest Product Revenue: ${min_value:.2f}\n"

        # DUPLICATE CODE: Footer formatting - identical to other reports
        footer = "\n==========================================\n"
        footer += "Report generated by ReportGenerator v1.0\n"
        footer += "Contact: reports@company.com\n"
        footer += "==========================================\n"

        return content + footer

    def export_report_to_csv(self, report_content: str, filename: str) -> str:
        """
        Export report content to CSV format.

        Args:
            report_content: The report content to export
            filename: Base filename for the export

        Returns:
            Export result message
        """
        # DUPLICATE CODE: Similar export logic - will be used in JSON export too
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        full_filename = f"{filename}_{timestamp}.csv"

        # Convert report content to CSV format
        lines = report_content.split("\n")
        csv_content = ""

        for line in lines:
            if ":" in line:
                parts = line.split(":", 1)
                csv_content += f'"{parts[0].strip()}","{parts[1].strip()}"\n'

        # DUPLICATE CODE: File writing logic
        result = "CSV Export completed successfully!\n"
        result += f"Filename: {full_filename}\n"
        result += f"Content size: {len(csv_content)} bytes\n"

        return result

    def export_report_to_json(self, report_content: str, filename: str) -> str:
        """
        Export report content to JSON format.

        Args:
            report_content: The report content to export
            filename: Base filename for the export

        Returns:
            Export result message
        """
        # DUPLICATE CODE: Similar export logic - timestamp and filename generation
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        full_filename = f"{filename}_{timestamp}.json"

        # Convert report content to JSON format
        lines = report_content.split("\n")
        json_data = {}

        for line in lines:
            if ":" in line:
                parts = line.split(":", 1)
                json_data[parts[0].strip()] = parts[1].strip()

        json_content = json.dumps(json_data, indent=2)

        # DUPLICATE CODE: File result formatting - identical to CSV export
        result = "JSON Export completed successfully!\n"
        result += f"Filename: {full_filename}\n"
        result += f"Content size: {len(json_content)} bytes\n"

        return result
